require 'fileutils'
require 'rexml/document'

module Xcodeproj

  # Provides support for generating, reading and serializing Xcode Workspace
  # documents.
  #
  class Workspace

    class FileReference
      # @return [String] the path to the project
      #
      attr_reader :path

      # @return [String] the type of reference to the project
      #
      # This can be of the following values:
      # - absolute
      # - group
      # - container
      # - developer (unsupported)
      attr_reader :type

      def self.from_node(node)
        type, path = node.attribute('location').value.split(':', 2)
        new(path, type)
      end

      def initialize(path, type=nil)
        @path = path
        @type = type || "group"
      end

      def ==(other)
          @path == other.path && @type == other.type
      end

      def to_node
        REXML::Element.new("FileRef").tap do |element|
          element.attributes['location'] = "#{@type}:#{@path}"
        end
      end

      # Get the absolute path to a project in a workspace
      #
      # @param [String] workspace_dir_path
      #         path of workspaces dir
      #
      # @return [String] The absolute path to the project
      #
      def absolute_path(workspace_dir_path)
        case @type
        when 'group'
          File.expand_path(File.join(workspace_dir_path, @path))
        when 'container'
          File.expand_path(File.join(workspace_dir_path, @path))
        when 'absolute'
          File.expand_path(@path)
        when 'developer'
          # TODO
          raise "Developer file reference type is not yet supported"
        else
          raise "Unsupported workspace file reference type #{@type}"
        end
      end
    end

    # @return [Array<String>] the paths of the projects contained in the
    # @return [Array<FileReference>] the paths of the projects contained in the
    #         workspace.
    #
    attr_reader :file_references
    attr_reader :schemes

    # @param  [Array] file_references @see file_references
    #
    def initialize(*file_references)
      @file_references = file_references.flatten
      @schemes = {}
    end

    #-------------------------------------------------------------------------#

    # Returns a workspace generated by reading the contents of the given path.
    #
    # @param  [String] path
    #         the path of the `xcworkspace` file.
    #
    # @return [Workspace] the generated workspace.
    #
    def self.new_from_xcworkspace(path)
      begin
        from_s(File.read(File.join(path, 'contents.xcworkspacedata')), File.expand_path(File.dirname(path)))
      rescue Errno::ENOENT
        new
      end
    end

    #-------------------------------------------------------------------------#

    # Returns a workspace generated by reading the contents of the given
    # XML representation.
    #
    # @param  [String] xml
    #         the XML representation of the workspace.
    #
    # @return [Workspace] the generated workspace.
    #
    def self.from_s(xml, workspace_path='')
      document = REXML::Document.new(xml)
      file_references = document.get_elements("/Workspace/FileRef").map do |node|
        FileReference.from_node(node)
      end
      instance = new(file_references)
      instance.load_schemes(workspace_path)
      instance
    end

    #-------------------------------------------------------------------------#

    # Adds a new path to the list of the of projects contained in the
    # workspace.
    #
    # @param  [String] projpath
    #         The path of the project to add.
    #
    # @return [void]
    #
    def <<(projpath)
      @file_references << projpath
      load_schemes_from_project File.expand_path(projpath)
    end

    # Checks if the workspace contains the project with the given file
    # reference.
    #
    # @param  [FileReference] file_reference
    #         The file_reference to the project.
    #
    # @return [Boolean] whether the project is contained in the workspace.
    #
    def include?(file_reference)
      @file_references.include?(file_reference)
    end

    # The template to generate a workspace XML representation.
    #
    TEMPLATE = %q[<?xml version="1.0" encoding="UTF-8"?><Workspace version="1.0"></Workspace>]

    # @return [String] the XML representation of the workspace.
    #
    def to_s
      REXML::Document.new(TEMPLATE).tap do |document|
        @file_references.each do |file_reference|
          document.root << file_reference.to_node
        end
      end.to_s
    end

    # Saves the workspace at the given `xcworkspace` path.
    #
    # @param  [String] path
    #         the path where to save the project.
    #
    # @return [void]
    #
    def save_as(path)
      FileUtils.mkdir_p(path)
      File.open(File.join(path, 'contents.xcworkspacedata'), 'w') do |out|
        out << to_s
      end
    end

    #-------------------------------------------------------------------------#

    # Load all schemes from all projects in workspace
    #
    # @param [String] workspace_dir_path
    #         path of workspaces dir
    #
    # @return [void]
    #
    def load_schemes workspace_dir_path
      @file_references.each do |file_reference|
        project_full_path = file_reference.absolute_path(workspace_dir_path)
        load_schemes_from_project(project_full_path)
      end
    end

    #-------------------------------------------------------------------------#

    private
    # Load all schemes from project
    #
    # @param [String] project_full_path
    #         project full path
    #
    # @return [void]
    #
    def load_schemes_from_project project_full_path
      schemes = Xcodeproj::Project.schemes project_full_path
      schemes.each do |scheme_name|
        @schemes[scheme_name] = project_full_path
      end
    end

    #-------------------------------------------------------------------------#

  end
end
